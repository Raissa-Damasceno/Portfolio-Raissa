{"ast":null,"code":"import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nimport { object } from \"prop-types\";\nexport default class ScrollService {\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"Contact Me\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n\n      scrollToHome = () => {\n        let homeScreen = document.getElementById(\"Home\");\n        if (!homeScreen) return;\n        homeScreen.scrollIntoView({\n          behavior: \"smooth\"\n        });\n      };\n\n      isElementInView = (elem, type) => {\n        let rec = elem.getBoundingClientRect();\n        let elementTop = rec.top;\n        let elementBottom = rec.Bottom;\n        let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\n        let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\n\n        switch (type) {\n          case \"partial\":\n            return partiallyVisible;\n\n          case \"complete\":\n            return completelyVisible;\n\n          default:\n            return false;\n        }\n      };\n\n      checkCurrentScreenUnderViewport = event => {\n        if (!event || object.keys(event).length < 1) return;\n\n        for (let screen of TOTAL_SCREENS) {\n          let screenFromDom = document.getElementsById(screen.screen_name);\n          if (!screenFromDom) continue;\n          let fullyVisible = this.isElementInView(screenFromDom, \"complete\");\n          let partiallyVisible = this.isElementInView(screenFromDom, \"partial\");\n\n          if (fullyVisible || partiallyVisible) {\n            if (partiallyVisible && !screen.alreadyRendered) {\n              ScrollService.currentScreenFadeIn.next({\n                fadeInScreen: screen.screen_name\n              });\n              screen[\"alreadyRendered\"] = true;\n              break;\n            }\n\n            if (fullyVisible) {\n              ScrollService.currentScreenBroasCaster.next({\n                screenInView: screen.screen_name\n              });\n            }\n          }\n        }\n      };\n    };\n\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\n  }\n\n} // export default ScrollService;\n\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"names":["TOTAL_SCREENS","Subject","object","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elementBottom","Bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","keys","length","screen","screenFromDom","getElementsById","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroasCaster","screenInView","addEventListener","scrollHandler","currentScreenBroadCaster"],"sources":["/Users/raissadamasceno/Desktop/Portfólio/client/src/Components/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nimport { object } from \"prop-types\";\n\nexport default class ScrollService {\n  static scrollHandler = new ScrollService();\n  currentScreenBroasCaster\n\n  static currentScreenBroadCaster = new Subject();\n  static currentScreenFadeIn = new Subject();\n\n  constructor() {\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\n  }\n  scrollToHireMe = () => {\n    let contactMeScreen = document.getElementById(\"Contact Me\");\n    if (!contactMeScreen) return;\n    contactMeScreen.scrollIntoView({ behavior: \"smooth\" });\n    scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({ behavior: \"smooth\" });\n    };\n    isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.Bottom;\n\n      let partiallyVisible =\n        elementTop < window.innerHeight && elementBottom >= 0;\n      let completelyVisible =\n        elementTop >= 0 && elementBottom <= window.innerHeight;\n\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n\n        case \"complete\":\n          return completelyVisible;\n        default:\n          return false;\n      }\n    };\n    checkCurrentScreenUnderViewport = (event) => {\n      if (!event || object.keys(event).length < 1) return;\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDom = document.getElementsById(screen.screen_name);\n        if (!screenFromDom) continue;\n\n        let fullyVisible = this.isElementInView(screenFromDom, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDom, \"partial\");\n\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name,\n            });\n            screen[\"alreadyRendered\"] = true;\n            break;\n          }\n          if (fullyVisible) {\n            ScrollService.currentScreenBroasCaster.next({\n              screenInView: screen.screen_name,\n            });\n          }\n        }\n      }\n    };\n  };\n}\n\n// export default ScrollService;\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,eAAe,MAAMC,aAAN,CAAoB;EAOjCC,WAAW,GAAG;IAAA,KAGdC,cAHc,GAGG,MAAM;MACrB,IAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAtB;MACA,IAAI,CAACF,eAAL,EAAsB;MACtBA,eAAe,CAACG,cAAhB,CAA+B;QAAEC,QAAQ,EAAE;MAAZ,CAA/B;;MACAC,YAAY,GAAG,MAAM;QACnB,IAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjB;QACA,IAAI,CAACI,UAAL,EAAiB;QACjBA,UAAU,CAACH,cAAX,CAA0B;UAAEC,QAAQ,EAAE;QAAZ,CAA1B;MACD,CAJD;;MAKAG,eAAe,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;QAChC,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAL,EAAV;QACA,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;QACA,IAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAxB;QAEA,IAAIC,gBAAgB,GAClBJ,UAAU,GAAGK,MAAM,CAACC,WAApB,IAAmCJ,aAAa,IAAI,CADtD;QAEA,IAAIK,iBAAiB,GACnBP,UAAU,IAAI,CAAd,IAAmBE,aAAa,IAAIG,MAAM,CAACC,WAD7C;;QAGA,QAAQT,IAAR;UACE,KAAK,SAAL;YACE,OAAOO,gBAAP;;UAEF,KAAK,UAAL;YACE,OAAOG,iBAAP;;UACF;YACE,OAAO,KAAP;QAPJ;MASD,CAnBD;;MAoBAC,+BAA+B,GAAIC,KAAD,IAAW;QAC3C,IAAI,CAACA,KAAD,IAAUzB,MAAM,CAAC0B,IAAP,CAAYD,KAAZ,EAAmBE,MAAnB,GAA4B,CAA1C,EAA6C;;QAC7C,KAAK,IAAIC,MAAT,IAAmB9B,aAAnB,EAAkC;UAChC,IAAI+B,aAAa,GAAGxB,QAAQ,CAACyB,eAAT,CAAyBF,MAAM,CAACG,WAAhC,CAApB;UACA,IAAI,CAACF,aAAL,EAAoB;UAEpB,IAAIG,YAAY,GAAG,KAAKrB,eAAL,CAAqBkB,aAArB,EAAoC,UAApC,CAAnB;UACA,IAAIT,gBAAgB,GAAG,KAAKT,eAAL,CAAqBkB,aAArB,EAAoC,SAApC,CAAvB;;UAEA,IAAIG,YAAY,IAAIZ,gBAApB,EAAsC;YACpC,IAAIA,gBAAgB,IAAI,CAACQ,MAAM,CAACK,eAAhC,EAAiD;cAC/ChC,aAAa,CAACiC,mBAAd,CAAkCC,IAAlC,CAAuC;gBACrCC,YAAY,EAAER,MAAM,CAACG;cADgB,CAAvC;cAGAH,MAAM,CAAC,iBAAD,CAAN,GAA4B,IAA5B;cACA;YACD;;YACD,IAAII,YAAJ,EAAkB;cAChB/B,aAAa,CAACoC,wBAAd,CAAuCF,IAAvC,CAA4C;gBAC1CG,YAAY,EAAEV,MAAM,CAACG;cADqB,CAA5C;YAGD;UACF;QACF;MACF,CAxBD;IAyBD,CAzDa;;IACZV,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKf,+BAAvC;EACD;;AATgC,C,CAmEnC;;AAnEqBvB,a,CACZuC,a,GAAgB,IAAIvC,aAAJ,E;AADJA,a,CAIZwC,wB,GAA2B,IAAI1C,OAAJ,E;AAJfE,a,CAKZiC,mB,GAAsB,IAAInC,OAAJ,E"},"metadata":{},"sourceType":"module"}